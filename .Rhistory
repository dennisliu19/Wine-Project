p1pos = prior/(1.0+prior)
p2pos = 1.0-p1pos
prior
p1pos
p2pos
?pbinom
pbviinom(3,45,0.6)
pbinom(3,45,1/3)
dbinom(1,45,0.6)
pbinom(3,45,1/6)
#-------------------------------------------------------------------------------
# Load The data
myData = read.csv("z6N8z2N7.csv")
setwd("~/Desktop/Wine-Project")
library("dplyr")
winedata <- read.csv("winemag-data_first150k.csv")
countrysummary <- winedata %>%
group_by(country) %>%
summarise(no_rows = length(X))
countrylist <- c("US","Spain","Italy","France","Argentina","Portugal","Chile","Australia")
wineupdate <- filter(winedata, winedata$country %in% countrylist)
varietysummary <- wineupdate %>%
group_by(variety) %>%
summarise(no_rows = length(X))
varietysummary <- varietysummary[order(-varietysummary$no_rows),]
varietyselection <- varietysummary$variety[1:8]
wineupdate <- filter(wineupdate, wineupdate$variety %in% varietyselection)
wineupdate <- mutate(wineupdate, category = ifelse(variety %in% c("Chardonnay","Sauvignon Blanc"),"white","red" ))
wineupdate <- mutate(wineupdate, countrycat = ifelse(country %in% c("US","Argentina","Chile","Australia"),"non-eu","eu"))
interaction.plot(wineupdate$category,wineupdate$countrycat,wineupdate$points)
if("manipulate" %in% installed.packages())(install.packages("manipulate"))
library(manipulate)
mplot(wineupdate)
if("manipulate" %in% installed.packages())(install.packages("manipulate"))
if("mosaic" %in% installed.packages())(install.packages("mosaic"))
library(manipulate)
library(mosaic)
install.packages("manipulate")
library(manipulate)
library(mosaic)
mplot(wineupdate)
library(ggpubr)
install.packages("ggpibr")
install.packages("ggpubr")
library(ggpubr)
ggboxplot(wineupdate, x = "category", y = "points", color = "countrycat",
palette = c("#00AFBB", "#E7B800"))
ggboxplot(wineupdate, x = "category", y = "points", color = "countrycat",
palette = c("#00AFBB", "#E7B800"))
ggline(wineupdate, x = "category", y = "points", color = "countrycat",
add = c("mean_se", "dotplot"),
palette = c("#00AFBB", "#E7B800"))
ggboxplot(wineupdate, x = "category", y = "points", color = "countrycat",
palette = c("#00AFBB", "#E7B800"))
ggline(wineupdate, x = "category", y = "points", color = "countrycat",
add = c("mean_se"),
palette = c("#00AFBB", "#E7B800"))
ggboxplot(wineupdate, x = "category", y = "points", color = "countrycat",
palette = c("#00AFBB", "#E7B800"))
interaction.plot(wineupdate$category,wineupdate$countrycat,wineupdate$points)
wineupdate[1,]
wineupdate[.1]
wineupdate[,1]
View(wineupdate[,c(2,5,6,10,12,13)])
View(wineupdate)
View(wineupdate)
winetruc <- wineupdate[,c(2,5,6,10,12,13)]
# Example for Jags-Ymet-Xnom2fac-MnormalHom.R
#-------------------------------------------------------------------------------
# Optional generic preliminaries:
graphics.off() # This closes all of R's graphics windows.
#-------------------------------------------------------------------------------
#Load The data file
fileNameRoot = "wine-"
graphFileType = "eps"
myDataFrame = winetruc
# Specify the column names in the data file relevant to the analysis:
yName="points"
# x1 should be factor with fewer levels, to plot in single pane:
x1Name="category"
x2Name="countrycat"
# Specify desired contrasts.
# Each main-effect contrast is a list of 2 vectors of level names,
# a comparison value (typically 0.0), and a ROPE (which could be NULL):
x1contrasts = list(
list( c("red") , c("white") , compVal=0.0 , ROPE=c(-1,1) )
)
x2contrasts = list(
list( c("eu") , c("non-eu") , compVal=0.0 , ROPE=c(-1,1) )
)
# Each interaction contrast is a list of 2 lists of 2 vectors of level names,
# a comparison value (typically 0.0), and a ROPE (which could be NULL)::
x1x2contrasts = list(
list( list( c("red") , c("white") ) ,
list( c("eu") , c("non-eu") ) ,
compVal=0.0 , ROPE=c(-1,1) )
)
#-------------------------------------------------------------------------------
# Load the relevant model into R's working memory:
source("Jags-Ymet-Xnom2fac-MnormalHom.R")
#-------------------------------------------------------------------------------
# Generate the MCMC chain:
mcmcCoda = genMCMC( datFrm=myDataFrame ,
yName=yName , x1Name=x1Name , x2Name=x2Name ,
numSavedSteps=15000 , thinSteps=5 ,
saveName=fileNameRoot )
#-------------------------------------------------------------------------------
# Display diagnostics of chain, for specified parameters:
parameterNames = varnames(mcmcCoda)
show( parameterNames ) # show all parameter names, for reference
for ( parName in c("b0","b1[1]","b2[1]","b1b2[1,1]","ySigma") ) {
diagMCMC( codaObject=mcmcCoda , parName=parName ,
saveName=fileNameRoot , saveType=graphFileType )
}
#-------------------------------------------------------------------------------
# Get summary statistics of chain:
summaryInfo = smryMCMC( mcmcCoda ,
datFrm=myDataFrame , x1Name=x1Name , x2Name=x2Name ,
x1contrasts=x1contrasts ,
x2contrasts=x2contrasts ,
x1x2contrasts=x1x2contrasts ,
saveName=fileNameRoot )
show(summaryInfo)
# Display posterior information:
plotMCMC( mcmcCoda ,
datFrm=myDataFrame , yName=yName , x1Name=x1Name , x2Name=x2Name ,
x1contrasts=x1contrasts ,
x2contrasts=x2contrasts ,
x1x2contrasts=x1x2contrasts ,
saveName=fileNameRoot , saveType=graphFileType )
#-------------------------------------------------------------------------------
# Load the relevant model into R's working memory:
source("Jags-Ymet-Xnom2fac-MnormalHom.R")
setwd("~/Desktop/Wine-Project")
#-------------------------------------------------------------------------------
# Load the relevant model into R's working memory:
source("Jags-Ymet-Xnom2fac-MnormalHom.R")
Jags.Ymet.Xnom2fac.MnormalHom.Example <- read.table("~/Desktop/Wine-Project/Jags-Ymet-Xnom2fac-MnormalHom-Example.R", header=TRUE, quote="\"")
View(Jags.Ymet.Xnom2fac.MnormalHom.Example)
#-------------------------------------------------------------------------------
# Load the relevant model into R's working memory:
source(~/Desktop/Wine-Project/Jags-Ymet-Xnom2fac-MnormalHom-Example.R")
#-------------------------------------------------------------------------------
# Generate the MCMC chain:
mcmcCoda = genMCMC( datFrm=myDataFrame ,
yName=yName , x1Name=x1Name , x2Name=x2Name ,
numSavedSteps=15000 , thinSteps=5 ,
saveName=fileNameRoot )
#-------------------------------------------------------------------------------
# Display diagnostics of chain, for specified parameters:
parameterNames = varnames(mcmcCoda)
show( parameterNames ) # show all parameter names, for reference
for ( parName in c("b0","b1[1]","b2[1]","b1b2[1,1]","ySigma") ) {
diagMCMC( codaObject=mcmcCoda , parName=parName ,
saveName=fileNameRoot , saveType=graphFileType )
}
#-------------------------------------------------------------------------------
# Get summary statistics of chain:
summaryInfo = smryMCMC( mcmcCoda ,
datFrm=myDataFrame , x1Name=x1Name , x2Name=x2Name ,
x1contrasts=x1contrasts ,
x2contrasts=x2contrasts ,
x1x2contrasts=x1x2contrasts ,
saveName=fileNameRoot )
show(summaryInfo)
# Display posterior information:
plotMCMC( mcmcCoda ,
datFrm=myDataFrame , yName=yName , x1Name=x1Name , x2Name=x2Name ,
x1contrasts=x1contrasts ,
x2contrasts=x2contrasts ,
x1x2contrasts=x1x2contrasts ,
saveName=fileNameRoot , saveType=graphFileType )
#-------------------------------------------------------------------------------
# # Other specific comparisons of cells:
# if ( fileNameRoot == "SalaryNormalHom-" ) {
#   # THIS x1level minus THAT x1level at AT x2level:
#   THISx1 = "Full"
#   THATx1 = "Assis"
#   ATx2 = "CHEM"
#   THISidx = which(levels(myDataFrame[,x1Name])==THISx1)
#   THATidx = which(levels(myDataFrame[,x1Name])==THATx1)
#   ATidx   = which(levels(myDataFrame[,x2Name])==ATx2)
#   openGraph(height=4,width=4)
#   compInfo = plotPost(
#     as.matrix(mcmcCoda)[,paste("m[",THISidx,",",ATidx,"]",sep="")] -
#       as.matrix(mcmcCoda)[,paste("m[",THATidx,",",ATidx,"]",sep="")] ,
#     main=paste(THISx1,"-",THATx1,"@",ATx2) ,
#     xlab=paste("Difference in",yName) ,
#     compVal=0 ,ROPE=c(-1000,1000) )
#   show(compInfo)
#   saveGraph(file=paste(fileNameRoot,THISx1,"-",THATx1,"At",ATx2,sep=""),
#             type=graphFileType)
#   # THIS x1level minus THAT x1level at AT x2level:
#   THISx1 = "Full"
#   THATx1 = "Assis"
#   ATx2 = "PSY"
#   THISidx = which(levels(myDataFrame[,x1Name])==THISx1)
#   THATidx = which(levels(myDataFrame[,x1Name])==THATx1)
#   ATidx   = which(levels(myDataFrame[,x2Name])==ATx2)
#   openGraph(height=4,width=4)
#   compInfo = plotPost(
#     as.matrix(mcmcCoda)[,paste("m[",THISidx,",",ATidx,"]",sep="")] -
#       as.matrix(mcmcCoda)[,paste("m[",THATidx,",",ATidx,"]",sep="")] ,
#     main=paste(THISx1,"-",THATx1,"@",ATx2) ,
#     xlab=paste("Difference in",yName) ,
#     compVal=0 ,ROPE=c(-1000,1000) )
#   show(compInfo)
#   saveGraph(file=paste(fileNameRoot,THISx1,"-",THATx1,"At",ATx2,sep=""),
#             type=graphFileType)
#   # THIS x2level minus THAT x2level at AT x1level:
#   THISx2 = "PSY"
#   THATx2 = "ENG"
#   ATx1 = "Full"
#   THISidx = which(levels(myDataFrame[,x2Name])==THISx2)
#   THATidx = which(levels(myDataFrame[,x2Name])==THATx2)
#   ATidx   = which(levels(myDataFrame[,x1Name])==ATx1)
#   openGraph(height=4,width=4)
#   compInfo = plotPost(
#     as.matrix(mcmcCoda)[,paste("m[",ATidx,",",THISidx,"]",sep="")] -
#       as.matrix(mcmcCoda)[,paste("m[",ATidx,",",THATidx,"]",sep="")] ,
#     main=paste(THISx2,"-",THATx2,"@",ATx1) ,
#     xlab=paste("Difference in",yName) ,
#     compVal=0 ,ROPE=c(-1000,1000) )
#   show(compInfo)
#   saveGraph(file=paste(fileNameRoot,THISx2,"-",THATx2,"At",ATx1,sep=""),
#             type=graphFileType)
# }
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# Load the relevant model into R's working memory:
source("~/Desktop/Wine-Project/Jags-Ymet-Xnom2fac-MnormalHom-Example.R")
#-------------------------------------------------------------------------------
# Load the relevant model into R's working memory:
source("~/Desktop/Wine-Project/Jags-Ymet-Xnom2fac-MnormalHom.R")
setwd("~/Desktop/Wine-Project")
#-------------------------------------------------------------------------------
# Load the relevant model into R's working memory:
source("Jags-Ymet-Xnom2fac-MnormalHom.R")
setwd("~/Desktop/Wine-Project")
# Example for Jags-Ymet-Xnom2fac-MnormalHom.R
#-------------------------------------------------------------------------------
# Optional generic preliminaries:
graphics.off() # This closes all of R's graphics windows.
#-------------------------------------------------------------------------------
#Load The data file
fileNameRoot = "wine-"
graphFileType = "eps"
myDataFrame = winetruc
# Specify the column names in the data file relevant to the analysis:
yName="points"
# x1 should be factor with fewer levels, to plot in single pane:
x1Name="category"
x2Name="countrycat"
# Specify desired contrasts.
# Each main-effect contrast is a list of 2 vectors of level names,
# a comparison value (typically 0.0), and a ROPE (which could be NULL):
x1contrasts = list(
list( c("red") , c("white") , compVal=0.0 , ROPE=c(-1,1) )
)
x2contrasts = list(
list( c("eu") , c("non-eu") , compVal=0.0 , ROPE=c(-1,1) )
)
# Each interaction contrast is a list of 2 lists of 2 vectors of level names,
# a comparison value (typically 0.0), and a ROPE (which could be NULL)::
x1x2contrasts = list(
list( list( c("red") , c("white") ) ,
list( c("eu") , c("non-eu") ) ,
compVal=0.0 , ROPE=c(-1,1) )
)
#-------------------------------------------------------------------------------
# Load the relevant model into R's working memory:
source("Jags-Ymet-Xnom2fac-MnormalHom.R")
#-------------------------------------------------------------------------------
# Generate the MCMC chain:
mcmcCoda = genMCMC( datFrm=myDataFrame ,
yName=yName , x1Name=x1Name , x2Name=x2Name ,
numSavedSteps=15000 , thinSteps=5 ,
saveName=fileNameRoot )
#-------------------------------------------------------------------------------
# Display diagnostics of chain, for specified parameters:
parameterNames = varnames(mcmcCoda)
show( parameterNames ) # show all parameter names, for reference
for ( parName in c("b0","b1[1]","b2[1]","b1b2[1,1]","ySigma") ) {
diagMCMC( codaObject=mcmcCoda , parName=parName ,
saveName=fileNameRoot , saveType=graphFileType )
}
#-------------------------------------------------------------------------------
# Get summary statistics of chain:
summaryInfo = smryMCMC( mcmcCoda ,
datFrm=myDataFrame , x1Name=x1Name , x2Name=x2Name ,
x1contrasts=x1contrasts ,
x2contrasts=x2contrasts ,
x1x2contrasts=x1x2contrasts ,
saveName=fileNameRoot )
show(summaryInfo)
# Display posterior information:
plotMCMC( mcmcCoda ,
datFrm=myDataFrame , yName=yName , x1Name=x1Name , x2Name=x2Name ,
x1contrasts=x1contrasts ,
x2contrasts=x2contrasts ,
x1x2contrasts=x1x2contrasts ,
saveName=fileNameRoot , saveType=graphFileType )
#-------------------------------------------------------------------------------
# # Other specific comparisons of cells:
# if ( fileNameRoot == "SalaryNormalHom-" ) {
#   # THIS x1level minus THAT x1level at AT x2level:
#   THISx1 = "Full"
#   THATx1 = "Assis"
#   ATx2 = "CHEM"
#   THISidx = which(levels(myDataFrame[,x1Name])==THISx1)
#   THATidx = which(levels(myDataFrame[,x1Name])==THATx1)
#   ATidx   = which(levels(myDataFrame[,x2Name])==ATx2)
#   openGraph(height=4,width=4)
#   compInfo = plotPost(
#     as.matrix(mcmcCoda)[,paste("m[",THISidx,",",ATidx,"]",sep="")] -
#       as.matrix(mcmcCoda)[,paste("m[",THATidx,",",ATidx,"]",sep="")] ,
#     main=paste(THISx1,"-",THATx1,"@",ATx2) ,
#     xlab=paste("Difference in",yName) ,
#     compVal=0 ,ROPE=c(-1000,1000) )
#   show(compInfo)
#   saveGraph(file=paste(fileNameRoot,THISx1,"-",THATx1,"At",ATx2,sep=""),
#             type=graphFileType)
#   # THIS x1level minus THAT x1level at AT x2level:
#   THISx1 = "Full"
#   THATx1 = "Assis"
#   ATx2 = "PSY"
#   THISidx = which(levels(myDataFrame[,x1Name])==THISx1)
#   THATidx = which(levels(myDataFrame[,x1Name])==THATx1)
#   ATidx   = which(levels(myDataFrame[,x2Name])==ATx2)
#   openGraph(height=4,width=4)
#   compInfo = plotPost(
#     as.matrix(mcmcCoda)[,paste("m[",THISidx,",",ATidx,"]",sep="")] -
#       as.matrix(mcmcCoda)[,paste("m[",THATidx,",",ATidx,"]",sep="")] ,
#     main=paste(THISx1,"-",THATx1,"@",ATx2) ,
#     xlab=paste("Difference in",yName) ,
#     compVal=0 ,ROPE=c(-1000,1000) )
#   show(compInfo)
#   saveGraph(file=paste(fileNameRoot,THISx1,"-",THATx1,"At",ATx2,sep=""),
#             type=graphFileType)
#   # THIS x2level minus THAT x2level at AT x1level:
#   THISx2 = "PSY"
#   THATx2 = "ENG"
#   ATx1 = "Full"
#   THISidx = which(levels(myDataFrame[,x2Name])==THISx2)
#   THATidx = which(levels(myDataFrame[,x2Name])==THATx2)
#   ATidx   = which(levels(myDataFrame[,x1Name])==ATx1)
#   openGraph(height=4,width=4)
#   compInfo = plotPost(
#     as.matrix(mcmcCoda)[,paste("m[",ATidx,",",THISidx,"]",sep="")] -
#       as.matrix(mcmcCoda)[,paste("m[",ATidx,",",THATidx,"]",sep="")] ,
#     main=paste(THISx2,"-",THATx2,"@",ATx1) ,
#     xlab=paste("Difference in",yName) ,
#     compVal=0 ,ROPE=c(-1000,1000) )
#   show(compInfo)
#   saveGraph(file=paste(fileNameRoot,THISx2,"-",THATx2,"At",ATx1,sep=""),
#             type=graphFileType)
# }
#-------------------------------------------------------------------------------
myDataFrame = winetruc
setwd("~/Desktop/Wine-Project")
library("dplyr")
if("manipulate" %in% installed.packages())(install.packages("manipulate"))
if("mosaic" %in% installed.packages())(install.packages("mosaic"))
if("ggpubr" %in% install.packages())(install.packages("ggpubr"))
library(manipulate)
library(mosaic)
library(ggpubr)
winedata <- read.csv("winemag-data_first150k.csv")
countrysummary <- winedata %>%
group_by(country) %>%
summarise(no_rows = length(X))
countrylist <- c("US","Spain","Italy","France","Argentina","Portugal","Chile","Australia")
wineupdate <- filter(winedata, winedata$country %in% countrylist)
varietysummary <- wineupdate %>%
group_by(variety) %>%
summarise(no_rows = length(X))
varietysummary <- varietysummary[order(-varietysummary$no_rows),]
varietyselection <- varietysummary$variety[1:8]
wineupdate <- filter(wineupdate, wineupdate$variety %in% varietyselection)
wineupdate <- mutate(wineupdate, category = ifelse(variety %in% c("Chardonnay","Sauvignon Blanc"),"white","red" ))
wineupdate <- mutate(wineupdate, countrycat = ifelse(country %in% c("US","Argentina","Chile","Australia"),"non-eu","eu"))
# ggboxplot(wineupdate, x = "category", y = "points", color = "countrycat",
#           palette = c("#00AFBB", "#E7B800"))
# interaction.plot(wineupdate$category,wineupdate$countrycat,wineupdate$points)
winetruc <- wineupdate[,c(2,5,6,10,12,13)]
install.packages("manipulate")
install.packages("mosaic")
install.packages("mosaic")
setwd("~/Desktop/Wine-Project")
# Example for Jags-Ymet-Xnom2fac-MnormalHom.R
#-------------------------------------------------------------------------------
# Optional generic preliminaries:
graphics.off() # This closes all of R's graphics windows.
#-------------------------------------------------------------------------------
#Load The data file
fileNameRoot = "wine-"
graphFileType = "eps"
myDataFrame = winetruc
# Specify the column names in the data file relevant to the analysis:
yName="points"
# x1 should be factor with fewer levels, to plot in single pane:
x1Name="category"
x2Name="countrycat"
# Specify desired contrasts.
# Each main-effect contrast is a list of 2 vectors of level names,
# a comparison value (typically 0.0), and a ROPE (which could be NULL):
x1contrasts = list(
list( c("red") , c("white") , compVal=0.0 , ROPE=c(-1,1) )
)
x2contrasts = list(
list( c("eu") , c("non-eu") , compVal=0.0 , ROPE=c(-1,1) )
)
# Each interaction contrast is a list of 2 lists of 2 vectors of level names,
# a comparison value (typically 0.0), and a ROPE (which could be NULL)::
x1x2contrasts = list(
list( list( c("red") , c("white") ) ,
list( c("eu") , c("non-eu") ) ,
compVal=0.0 , ROPE=c(-1,1) )
)
#-------------------------------------------------------------------------------
# Load the relevant model into R's working memory:
source("Jags-Ymet-Xnom2fac-MnormalHom.R")
#-------------------------------------------------------------------------------
# Generate the MCMC chain:
mcmcCoda = genMCMC( datFrm=myDataFrame ,
yName=yName , x1Name=x1Name , x2Name=x2Name ,
numSavedSteps=15000 , thinSteps=5 ,
saveName=fileNameRoot )
#-------------------------------------------------------------------------------
# Display diagnostics of chain, for specified parameters:
parameterNames = varnames(mcmcCoda)
show( parameterNames ) # show all parameter names, for reference
for ( parName in c("b0","b1[1]","b2[1]","b1b2[1,1]","ySigma") ) {
diagMCMC( codaObject=mcmcCoda , parName=parName ,
saveName=fileNameRoot , saveType=graphFileType )
}
#-------------------------------------------------------------------------------
# Get summary statistics of chain:
summaryInfo = smryMCMC( mcmcCoda ,
datFrm=myDataFrame , x1Name=x1Name , x2Name=x2Name ,
x1contrasts=x1contrasts ,
x2contrasts=x2contrasts ,
x1x2contrasts=x1x2contrasts ,
saveName=fileNameRoot )
show(summaryInfo)
# Display posterior information:
plotMCMC( mcmcCoda ,
datFrm=myDataFrame , yName=yName , x1Name=x1Name , x2Name=x2Name ,
x1contrasts=x1contrasts ,
x2contrasts=x2contrasts ,
x1x2contrasts=x1x2contrasts ,
saveName=fileNameRoot , saveType=graphFileType )
#-------------------------------------------------------------------------------
# # Other specific comparisons of cells:
# if ( fileNameRoot == "SalaryNormalHom-" ) {
#   # THIS x1level minus THAT x1level at AT x2level:
#   THISx1 = "Full"
#   THATx1 = "Assis"
#   ATx2 = "CHEM"
#   THISidx = which(levels(myDataFrame[,x1Name])==THISx1)
#   THATidx = which(levels(myDataFrame[,x1Name])==THATx1)
#   ATidx   = which(levels(myDataFrame[,x2Name])==ATx2)
#   openGraph(height=4,width=4)
#   compInfo = plotPost(
#     as.matrix(mcmcCoda)[,paste("m[",THISidx,",",ATidx,"]",sep="")] -
#       as.matrix(mcmcCoda)[,paste("m[",THATidx,",",ATidx,"]",sep="")] ,
#     main=paste(THISx1,"-",THATx1,"@",ATx2) ,
#     xlab=paste("Difference in",yName) ,
#     compVal=0 ,ROPE=c(-1000,1000) )
#   show(compInfo)
#   saveGraph(file=paste(fileNameRoot,THISx1,"-",THATx1,"At",ATx2,sep=""),
#             type=graphFileType)
#   # THIS x1level minus THAT x1level at AT x2level:
#   THISx1 = "Full"
#   THATx1 = "Assis"
#   ATx2 = "PSY"
#   THISidx = which(levels(myDataFrame[,x1Name])==THISx1)
#   THATidx = which(levels(myDataFrame[,x1Name])==THATx1)
#   ATidx   = which(levels(myDataFrame[,x2Name])==ATx2)
#   openGraph(height=4,width=4)
#   compInfo = plotPost(
#     as.matrix(mcmcCoda)[,paste("m[",THISidx,",",ATidx,"]",sep="")] -
#       as.matrix(mcmcCoda)[,paste("m[",THATidx,",",ATidx,"]",sep="")] ,
#     main=paste(THISx1,"-",THATx1,"@",ATx2) ,
#     xlab=paste("Difference in",yName) ,
#     compVal=0 ,ROPE=c(-1000,1000) )
#   show(compInfo)
#   saveGraph(file=paste(fileNameRoot,THISx1,"-",THATx1,"At",ATx2,sep=""),
#             type=graphFileType)
#   # THIS x2level minus THAT x2level at AT x1level:
#   THISx2 = "PSY"
#   THATx2 = "ENG"
#   ATx1 = "Full"
#   THISidx = which(levels(myDataFrame[,x2Name])==THISx2)
#   THATidx = which(levels(myDataFrame[,x2Name])==THATx2)
#   ATidx   = which(levels(myDataFrame[,x1Name])==ATx1)
#   openGraph(height=4,width=4)
#   compInfo = plotPost(
#     as.matrix(mcmcCoda)[,paste("m[",ATidx,",",THISidx,"]",sep="")] -
#       as.matrix(mcmcCoda)[,paste("m[",ATidx,",",THATidx,"]",sep="")] ,
#     main=paste(THISx2,"-",THATx2,"@",ATx1) ,
#     xlab=paste("Difference in",yName) ,
#     compVal=0 ,ROPE=c(-1000,1000) )
#   show(compInfo)
#   saveGraph(file=paste(fileNameRoot,THISx2,"-",THATx2,"At",ATx1,sep=""),
#             type=graphFileType)
# }
#-------------------------------------------------------------------------------
graphics.off()
# ggboxplot(wineupdate, x = "category", y = "points", color = "countrycat",
#           palette = c("#00AFBB", "#E7B800"))
interaction.plot(wineupdate$category,wineupdate$countrycat,wineupdate$points)
